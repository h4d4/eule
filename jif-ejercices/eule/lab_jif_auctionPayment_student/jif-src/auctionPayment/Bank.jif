package auctionPayment;

import java.util.Random;
import java.util.HashMap;


public class Bank[principal P] extends PubliclyNamedEntity[P] authority (P) {
  private int nextAccountId = 1;

  private int accountId;
  private int accountCredentials;
  private int balance;

  private int onHold;
  private HashMap holdRecords;

  /**
   * Create a new instance.
   * Initialize the field name in the obvious way.
   */
  public Bank(String name) {
    this.name = name;
  }

  /**
   * Initialize accountId as this.nextAccountId++
   * Initialize accountCredentials as (new Random()).nextInt(Integer.MAX_VALUE) + 1
   * Initialize balance in the obvious way
   * Initialize onHold to 0
   * Initialize holdRecords to new HashMap()
   * Returns an array whose first element is accountId and second element is accountCredentials
   */
  public int[]
  setBalance
  (int balance) {
    int[] res = new int[2];
    // ...
    return res;
  }

  /**
   * Returns the field balance.
   */
  public int getBalance() {
    int res = Integer.MIN_VALUE;
    // ...
    return res;
  }

  /**
   * Returns the field onHold.
   */
  public int getAmountOnHold() {
    int res = Integer.MAX_VALUE;
    // ...
    return res;
  }

  /**
   * Execute: int credentials = owner.getCredentials(requester, amount)
   * IF all the following hold:
   *   accountId == this.accountId && credentials == this.accountCredentials
   *   amount < (this.balance - this.onHold)
   * THEN:
   *   Add amount to this.onHold
   *   Execute: authorizationCode = (new Random()).nextInt(Integer.MAX_VALUE) + 1
   *   Add amount in this.holdRecords with key authorizationCode
   *   Return authorizationCode
   * OTHERWISE:
   *   Return -1
   */
  public int
  requestPayment
  (Principal Pr, PubliclyNamedEntity[Pr] requester,
   User[P] accountOwner, int accountId, int amount) {
    int authorizationCode = -1;

    // ...

    return authorizationCode;
  }

  /**
   * Return true iff authorizationCode > 0, otherwise return false
   */
  public boolean
  validateAuthorizationCode
  (int authorizationCode) {
    boolean res = false;
    // ...
    return res;
  }

  /**
   * Remove the value (amt) associated with the key authorizationCode from this.holdRecords
   * Remove amt from this.onHold
   * Return true iff success, otherwise false
   */
  public boolean
  cancelPayment
  (int authorizationCode) {
    boolean res = false;
    // ...
    return res;
  }

  /**
   * Execute: money = buyersBank.sendMoney(Seller, authorizationCode)
   * Adds money to this.balance
   */
  public void capture
  (Bank[Buyer] buyersBank, int authorizationCode) {
    // ...
  }

  /**
   * Remove the value (amt) associated with the key authorizationCode from this.holdRecords
   * Remove amt from this.balance and this.onHold
   * Return amt (0 if impossible to retrieve amt)
   *
   */
  public int
  sendMoney
  (principal P2, int authorizationCode) {
    int res = 0;
    // ...
    return res;
  }

}


// Local Variables: 
// mode: java
// c-basic-offset: 2
// indent-tabs-mode: nil
// End:
